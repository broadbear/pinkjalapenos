{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\n#minor change to demonstrate changes\n\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, 2.0, True)\nright_drive_smart = Motor(Ports.PORT12, 2.0, False)\n\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)\ncontroller = Controller()\nelevator_motors_motor_a = Motor(Ports.PORT5, False)\nelevator_motors_motor_b = Motor(Ports.PORT11, True)\nelevator_motors = MotorGroup(elevator_motors_motor_a, elevator_motors_motor_b)\nintake_motors_motor_a = Motor(Ports.PORT4, False)\nintake_motors_motor_b = Motor(Ports.PORT10, True)\nintake_motors = MotorGroup(intake_motors_motor_a, intake_motors_motor_b)\ntouchled_7 = Touchled(Ports.PORT7)\nbumper_1 = Bumper(Ports.PORT1)\n\n\n\n# Make random actually random\ndef setRandomSeedUsingAccel():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    urandom.seed(int(xaxis + yaxis + zaxis))\n    \n# Set random seed \nsetRandomSeedUsingAccel()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_left_shoulder_control_motors_stopped = True\nf_buttons_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller = False\ndrivetrain_r_needs_to_be_stopped_controller = False\n\n# define a task that will handle monitoring inputs from controller\ndef rc_auto_loop_function_controller():\n    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, f_buttons_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axisA\n            # right = axisD\n            drivetrain_left_side_speed = controller.axisA.position()\n            drivetrain_right_side_speed = controller.axisD.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonLUp/buttonLDown status\n            # to control intake_motors\n            if controller.buttonLUp.pressing():\n                intake_motors.spin(FORWARD)\n                controller_left_shoulder_control_motors_stopped = False\n            elif controller.buttonLDown.pressing():\n                intake_motors.spin(REVERSE)\n                controller_left_shoulder_control_motors_stopped = False\n            elif not controller_left_shoulder_control_motors_stopped:\n                intake_motors.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_left_shoulder_control_motors_stopped = True\n            # check the buttonFUp/buttonFDown status\n            # to control elevator_motors\n            if controller.buttonFUp.pressing():\n                elevator_motors.spin(FORWARD)\n                f_buttons_control_motors_stopped = False\n            elif controller.buttonFDown.pressing():\n                elevator_motors.spin(REVERSE)\n                f_buttons_control_motors_stopped = False\n            elif not f_buttons_control_motors_stopped:\n                elevator_motors.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                f_buttons_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nmessage1 = Event()\nmyVariable = 0\nelevatorTurns = 0\ncurrentSection = 0\n\ndef onevent_touchled_7_pressed_0():\n    global message1, myVariable, elevatorTurns, currentSection, vexcode_brain_precision, vexcode_console_precision\n    if currentSection == 0:\n        touchled_7.set_color(Color.RED)\n        drivetrain.set_heading(0, DEGREES)\n        currentSection = 1\n        # pick up 2 greens\n        drivetrain.drive_for(FORWARD, 26, INCHES)\n        if 0 == 0:\n            drivetrain.turn_to_heading(55, DEGREES)\n        if 0 == 0:\n            # backup up to goal 2\n            while not bumper_1.pressing():\n                drivetrain.drive(REVERSE)\n                wait(20, MSEC)\n            drivetrain.stop()\n            drivetrain.drive_for(REVERSE, 2, INCHES, wait=False)\n            # dump two greens in goal 2\n            elevator_motors.spin_for(FORWARD, elevatorTurns, TURNS)\n            elevator_motors.spin_for(REVERSE, elevatorTurns, TURNS, wait=False)\n        brain.screen.print(\"STOP\")\n        brain.play_note(3, 0, 1000)\n        touchled_7.set_color(Color.PURPLE)\n\ndef onevent_touchled_7_pressed_1():\n    global message1, myVariable, elevatorTurns, currentSection, vexcode_brain_precision, vexcode_console_precision\n    if currentSection == 1:\n        touchled_7.set_color(Color.RED)\n        drivetrain.set_heading(0, DEGREES)\n        currentSection = 2\n        # pick up 2 greens\n        drivetrain.drive_for(FORWARD, 19, INCHES)\n        drivetrain.turn_to_heading(138, DEGREES)\n        wait(0.3, SECONDS)\n        drivetrain.turn_to_heading(138, DEGREES)\n        # backup up to goal 3\n        while not bumper_1.pressing():\n            drivetrain.drive(REVERSE)\n            wait(20, MSEC)\n        drivetrain.stop()\n        drivetrain.drive_for(REVERSE, 2, INCHES, wait=False)\n        # dump two greens in goal 3\n        elevator_motors.spin_for(FORWARD, elevatorTurns, TURNS)\n        elevator_motors.spin_for(REVERSE, elevatorTurns, TURNS, wait=False)\n        if 0 == 1:\n            # pull away from goal and knock over red cube\n            drivetrain.drive_for(FORWARD, 3, INCHES)\n            drivetrain.turn_to_heading(90, DEGREES)\n            drivetrain.drive_for(FORWARD, 10, INCHES)\n        brain.screen.print(\"STOP\")\n        brain.play_note(3, 0, 1000)\n        touchled_7.set_color(Color.PURPLE)\n\ndef onevent_touchled_7_pressed_2():\n    global message1, myVariable, elevatorTurns, currentSection, vexcode_brain_precision, vexcode_console_precision\n    if currentSection == 2:\n        touchled_7.set_color(Color.RED)\n        drivetrain.set_heading(0, DEGREES)\n        currentSection = 3\n        # pick up 4 greens\n        drivetrain.drive_for(FORWARD, 1, INCHES)\n        drivetrain.turn_to_heading(52, DEGREES)\n        drivetrain.drive_for(FORWARD, 10, INCHES)\n        drivetrain.turn_to_heading(0, DEGREES)\n        drivetrain.drive_for(FORWARD, 15, INCHES)\n        # turn around and dump greens in goal 1\n        drivetrain.turn_to_heading(180, DEGREES)\n        wait(0.3, SECONDS)\n        drivetrain.turn_to_heading(180, DEGREES)\n        drivetrain.drive_for(FORWARD, 22, INCHES)\n        drivetrain.turn_to_heading(255, DEGREES)\n        wait(0.3, SECONDS)\n        drivetrain.turn_to_heading(255, DEGREES)\n        drivetrain.drive_for(FORWARD, 10, INCHES)\n        drivetrain.turn_to_heading(285, DEGREES)\n        while not bumper_1.pressing():\n            drivetrain.drive(REVERSE)\n            wait(20, MSEC)\n        drivetrain.stop()\n        drivetrain.drive_for(REVERSE, 2, INCHES, wait=False)\n        # dump four greens in goal 1\n        elevator_motors.spin_for(FORWARD, elevatorTurns, TURNS)\n        elevator_motors.spin_for(REVERSE, elevatorTurns, TURNS, wait=False)\n        if 0 == 1:\n            # pull away from goal 1\n            drivetrain.drive_for(FORWARD, 10, INCHES)\n            drivetrain.turn_to_heading(0, DEGREES)\n            drivetrain.drive_for(FORWARD, 38, INCHES)\n            # knock over red cube\n            drivetrain.turn_for(LEFT, 15, DEGREES)\n            # park\n            drivetrain.turn_to_heading(55, DEGREES)\n            drivetrain.drive_for(FORWARD, 12, INCHES)\n        brain.screen.print(\"STOP\")\n        brain.play_note(3, 0, 1000)\n        touchled_7.set_color(Color.PURPLE)\n\ndef onevent_touchled_7_pressed_3():\n    global message1, myVariable, elevatorTurns, currentSection, vexcode_brain_precision, vexcode_console_precision\n    # start the intake motors\n    while True:\n        intake_motors.spin(REVERSE)\n        wait(20, MSEC)\n\ndef when_started1():\n    global message1, myVariable, elevatorTurns, currentSection, vexcode_brain_precision, vexcode_console_precision\n    # calibrate inertial and increase motor velocities\n    touchled_7.set_color(Color.RED)\n    elevatorTurns = 3\n    currentSection = 2\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(50)\n    intake_motors.set_velocity(100, PERCENT)\n    elevator_motors.set_velocity(100, PERCENT)\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(50, PERCENT)\n    drivetrain.set_heading(0, DEGREES)\n    drivetrain.set_stopping(BRAKE)\n    brain.play_sound(SoundType.FILLUP)\n    touchled_7.set_color(Color.PURPLE)\n\n# Calibrate the Drivetrain Gyro\ncalibrate_drivetrain()\n\n# system event handlers\ntouchled_7.pressed(onevent_touchled_7_pressed_0)\ntouchled_7.pressed(onevent_touchled_7_pressed_1)\ntouchled_7.pressed(onevent_touchled_7_pressed_2)\ntouchled_7.pressed(onevent_touchled_7_pressed_3)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[6,12,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"2:1","direction":"rev","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"intake_motors","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"elevator_motors","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[5,11],"name":"elevator_motors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4,10],"name":"intake_motors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7],"name":"touchled_7","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[1],"name":"bumper_1","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}